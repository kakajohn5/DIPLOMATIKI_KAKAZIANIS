{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR } from './types';\nimport setAuthToken from '../utils/setAuthToken'; //Load User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; //Register User\n\nexport const register = _ref => {\n  let {\n    name,\n    email,\n    password\n  } = _ref;\n  return async dispatch => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      name,\n      email,\n      password\n    });\n\n    try {\n      const res = await axios.post('/api/users', body, config);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n    } catch (err) {\n      const errors = err.response.data.errors;\n\n      if (errors) {\n        errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n      }\n\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    }\n  };\n}; //Login User\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/dim_k/OneDrive/Υπολογιστής/Πτυχιακη/client/src/actions/auth.js"],"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login","LOGIN_SUCCESS","LOGIN_FAIL"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport {setAlert} from './alert';\r\nimport{\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    USER_LOADED,\r\n    AUTH_ERROR\r\n}from './types'\r\nimport setAuthToken from '../utils/setAuthToken';\r\n//Load User\r\nexport const loadUser = () => async dispatch => {\r\n    if(localStorage.token){\r\n        setAuthToken(localStorage.token);\r\n    }\r\n    try {\r\n        const res = await axios.get('/api/auth');\r\n        dispatch({\r\n            type: USER_LOADED,\r\n            payload: res.data\r\n        });       \r\n    } catch (err) {\r\n        dispatch({\r\n            type:AUTH_ERROR\r\n        });         \r\n    }\r\n}\r\n//Register User\r\nexport const register = ({ name, email, password }) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n\r\nconst body = JSON.stringify(({name,email,password}));\r\ntry {\r\n    const res = await axios.post('/api/users', body, config);\r\n    dispatch({\r\n        type:REGISTER_SUCCESS,\r\n        payload:res.data\r\n    })\r\n} catch (err) {\r\n    const errors = err.response.data.errors;\r\n\r\n     if(errors){\r\n         errors.forEach(error => dispatch(setAlert(error.msg, 'danger')))\r\n     }\r\n    dispatch({\r\n        type: REGISTER_FAIL\r\n    });    \r\n}\r\n};\r\n//Login User\r\nexport const login = (email, password) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n\r\nconst body = JSON.stringify(({email,password}));\r\ntry {\r\n    const res = await axios.post('/api/auth', body, config);\r\n    dispatch({\r\n        type:LOGIN_SUCCESS,\r\n        payload:res.data\r\n    });\r\n} catch (err) {\r\n    const errors = err.response.data.errors;\r\n\r\n     if(errors){\r\n         errors.forEach(error => dispatch(setAlert(error.msg, 'danger')))\r\n     }\r\n    dispatch({\r\n        type: LOGIN_FAIL\r\n    });    \r\n}\r\n};"]},"metadata":{},"sourceType":"module"}